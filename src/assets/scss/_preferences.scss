@use "./var";
@use "sass:math";
@use "./function";
@use "./mixins";

/**

font size

*/

.fs-medium {
  @include mixins.switch-font-size(var.$fs-medium);
}

.fs-large {
  @include mixins.switch-font-size(var.$fs-large);
}

.fs-x-large {
  @include mixins.switch-font-size(var.$fs-x-large);
}

/**

brightness

*/

@for $i from 0 through 100 {
  $actual-brightness-value: max($i, 20);
  $filter-value: math.div($actual-brightness-value, 100);

  .brightness-#{$i} {
    filter: brightness($filter-value);
    transition: filter 0.1s ease-out;
  }
}

/**

line space


*/

$num-iterations-line: function.calculate-interations(
  var.$min-line-space,
  var.$max-line-space,
  var.$step-line-space
);

@for $i from 0 through $num-iterations-line {
  $line-space-value: var.$min-line-space + ($i * var.$step-line-space);
  $class-suffix: function.str-replace($line-space-value + "", ".", "");

  .line-space-#{$class-suffix} {
    p,
    input::placeholder,
    textarea::placeholder {
      line-height: $line-space-value !important;
    }
  }
}

/**

letter space

*/
$num-iterations-letter: function.calculate-interations(
  var.$min-letter-space,
  var.$max-letter-space,
  var.$step-letter-space
);

@for $i from 0 through $num-iterations-letter {
  $letter-space-value: var.$min-letter-space + ($i * var.$step-letter-space);
  $class-suffix: function.str-replace($letter-space-value + "", ".", "");

  .letter-space-#{$class-suffix} {
    p,
    input::placeholder,
    textarea::placeholder {
      letter-spacing: #{$letter-space-value}em !important;
    }
  }
}

/**


cursor

*/
@each $size in var.$cursor-sizes {
  @each $color in var.$cursor-colors {
    .cursor-#{$size}.cursor-#{$color} {
      *,
      input,
      select,
      p {
        cursor: url("/cursor/#{$color}/cursor-#{$color}-#{$size}.svg"), auto;
      }

      .cursor-pointer {
        cursor: url("/cursor-pointer/#{$color}/cursor-pointer-#{$color}-#{$size}.svg"),
          pointer;
      }
    }
  }
}
